<html>

<head>
  <meta charset="UTF-8">
  <title>INFO 3300 - Feb 10</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>

</head>

<body>
  <div class="container larger">
    <h3>Prompt for Wednesday, February 10</h3>
    <p>
      HW1 will soon be available on CMS. You will receive CMS access shortly before HW1 is released.
    </p>
    <p>
      You can access these files from the <a href="https://github.com/jeffrz/info3300-sp2021">course Github
        repository</a> Here is an <a href="http://rogerdudler.github.io/git-guide/">informal guide to git</a>.
    </p>
    <p>
      To develop efficiently, have a local web server running. Python has a simple, built-in server. Use <tt>python -m
        http.server</tt> for python 3; use <tt>python -m SimpleHTTPServer 8000</tt> for python 2 (execute "python" in
      cmd for version number). You probably have python 3.
    </p>
    <p>
      We will be working in Javascript for most of the term. It can act pretty oddly, especially in comparison to
      languages that strictly type objects. <br />
      What are some of the unusual aspects of this language? Open a console in your browser...
    </p>
    <p>
      Time permitting, let's also review <a href="http://www.json.org">Javascript Object Notation</a>.

    </p>

    <svg width=100 height=100>
      <rect id="rectangle" x=10 y=10 width=80 height=80 fill="steelblue" />
    </svg>


    <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
    <h5>Code for today:</h5>
    <pre>
      <code id="display1" class="hljs javascript">
      </code>
      <code id="display2" class="hljs javascript">
      </code>
    </pre>


    <!--- Code for today's class --->
    <script id="notes1">

      // Try pasting these commands into your browser console

      // Console.log is our friend
      console.log('Hello World');

      // Let's explore some Javascript types!
      console.log("--- Checking out some types ---")

      //javascript has no sense of floats or integers 
      console.log(typeof (1)); //number
      console.log(typeof (1.0)); //number- no floats
      console.log(typeof (Math.PI));//irrational numbers are also just numbers

      console.log(typeof ("hello")); //string
      console.log(typeof ('hello')); //can use double or single quotes for strings
      console.log(typeof ("h")); //also a string not char
      console.log(typeof ("パソコン")); //unicode is also just string
      console.log("パソコン");

      console.log(typeof (Math)); // an object. javascript objects all the way down. almost everything in js is an object. object is the super type of everything. classes are gonna be objects but "special" ones.

      console.log(typeof (new Object())); //object
      console.log(typeof (/regex/)); //also an object
      console.log(typeof ([])); //looks like an array but actually an object
      console.log(new Object()); //objects are also dictionaries

      //p much everything except a number and string is an object

      console.log(typeof (true)); //boolean







      // Learn a bit more about Objects
      // console.log("--- Testing [] and {} ---")






      // So what can accept keys?
      // console.log("--- So what works like a dict? ---");
      // let differentTypes = [3, "hello", new Object(), [1,2,3], function(x) {}, console];
      // for (let item of differentTypes) {
      //   console.log( item, typeof(item) );
      //   item['test'] = "keyAdded";
      //   console.log( item['test'] ); 
      // } 


      // Types can get a bit unexpected in JS
      // console.log("--- Now exploring type coercion ---")



      // Why does this matter?




      // Comparison weirdness
      // console.log("--- Now trying some comparisons ---")





      // Shortcircuiting of logical statements
      // console.log("--- Shortcircuiting ---");




    </script>


    <script id="notes2">

      // How do two script tags interact with each other?
      let test = "script tags. how do they work?";


      // * Let's talk JSON



      // let obj = [{"name":"DDWA", "number":3300 },{"name": "Java", "number": 2110},{"name": "Python", "number": 1110}];
      // console.log(obj);



      // This one won't parse because it breaks JSON specifications
      // let badStr = '{"list": ["commas,", "single_quo\'tes", "double_quo"tes", "@sÃ§i|"], "nestedObject": {"undefined": undefined, "defined": 3.1415926535}, "Infinity": Infinity, "NaN": NaN, "bool": true}'





    </script>






    <!--- calls the highlight library to fill the <pre> tag with code --->
    <script>
      document.getElementById("display1").innerText = document.getElementById("notes1").innerText;
      document.getElementById("display2").innerText = document.getElementById("notes2").innerText;
      hljs.initHighlightingOnLoad();
    </script>

  </div>
</body>

</html>